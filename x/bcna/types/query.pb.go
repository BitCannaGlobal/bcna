// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bcna/bcna/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2980e3b72beb2, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2980e3b72beb2, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetBitcannaidByBcnaidRequest struct {
	Bcnaid string `protobuf:"bytes,1,opt,name=bcnaid,proto3" json:"bcnaid,omitempty"`
}

func (m *QueryGetBitcannaidByBcnaidRequest) Reset()         { *m = QueryGetBitcannaidByBcnaidRequest{} }
func (m *QueryGetBitcannaidByBcnaidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBitcannaidByBcnaidRequest) ProtoMessage()    {}
func (*QueryGetBitcannaidByBcnaidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2980e3b72beb2, []int{2}
}
func (m *QueryGetBitcannaidByBcnaidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBitcannaidByBcnaidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBitcannaidByBcnaidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBitcannaidByBcnaidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBitcannaidByBcnaidRequest.Merge(m, src)
}
func (m *QueryGetBitcannaidByBcnaidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBitcannaidByBcnaidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBitcannaidByBcnaidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBitcannaidByBcnaidRequest proto.InternalMessageInfo

func (m *QueryGetBitcannaidByBcnaidRequest) GetBcnaid() string {
	if m != nil {
		return m.Bcnaid
	}
	return ""
}

type QueryGetBitcannaidByBcnaidResponse struct {
	Bitcannaid *Bitcannaid `protobuf:"bytes,1,opt,name=Bitcannaid,proto3" json:"Bitcannaid,omitempty"`
}

func (m *QueryGetBitcannaidByBcnaidResponse) Reset()         { *m = QueryGetBitcannaidByBcnaidResponse{} }
func (m *QueryGetBitcannaidByBcnaidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBitcannaidByBcnaidResponse) ProtoMessage()    {}
func (*QueryGetBitcannaidByBcnaidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2980e3b72beb2, []int{3}
}
func (m *QueryGetBitcannaidByBcnaidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBitcannaidByBcnaidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBitcannaidByBcnaidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBitcannaidByBcnaidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBitcannaidByBcnaidResponse.Merge(m, src)
}
func (m *QueryGetBitcannaidByBcnaidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBitcannaidByBcnaidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBitcannaidByBcnaidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBitcannaidByBcnaidResponse proto.InternalMessageInfo

func (m *QueryGetBitcannaidByBcnaidResponse) GetBitcannaid() *Bitcannaid {
	if m != nil {
		return m.Bitcannaid
	}
	return nil
}

type QueryGetBitcannaidRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetBitcannaidRequest) Reset()         { *m = QueryGetBitcannaidRequest{} }
func (m *QueryGetBitcannaidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBitcannaidRequest) ProtoMessage()    {}
func (*QueryGetBitcannaidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2980e3b72beb2, []int{4}
}
func (m *QueryGetBitcannaidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBitcannaidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBitcannaidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBitcannaidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBitcannaidRequest.Merge(m, src)
}
func (m *QueryGetBitcannaidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBitcannaidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBitcannaidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBitcannaidRequest proto.InternalMessageInfo

func (m *QueryGetBitcannaidRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetBitcannaidResponse struct {
	Bitcannaid Bitcannaid `protobuf:"bytes,1,opt,name=Bitcannaid,proto3" json:"Bitcannaid"`
}

func (m *QueryGetBitcannaidResponse) Reset()         { *m = QueryGetBitcannaidResponse{} }
func (m *QueryGetBitcannaidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBitcannaidResponse) ProtoMessage()    {}
func (*QueryGetBitcannaidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2980e3b72beb2, []int{5}
}
func (m *QueryGetBitcannaidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBitcannaidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBitcannaidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBitcannaidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBitcannaidResponse.Merge(m, src)
}
func (m *QueryGetBitcannaidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBitcannaidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBitcannaidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBitcannaidResponse proto.InternalMessageInfo

func (m *QueryGetBitcannaidResponse) GetBitcannaid() Bitcannaid {
	if m != nil {
		return m.Bitcannaid
	}
	return Bitcannaid{}
}

type QueryAllBitcannaidRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBitcannaidRequest) Reset()         { *m = QueryAllBitcannaidRequest{} }
func (m *QueryAllBitcannaidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBitcannaidRequest) ProtoMessage()    {}
func (*QueryAllBitcannaidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2980e3b72beb2, []int{6}
}
func (m *QueryAllBitcannaidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBitcannaidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBitcannaidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBitcannaidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBitcannaidRequest.Merge(m, src)
}
func (m *QueryAllBitcannaidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBitcannaidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBitcannaidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBitcannaidRequest proto.InternalMessageInfo

func (m *QueryAllBitcannaidRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBitcannaidResponse struct {
	Bitcannaid []Bitcannaid        `protobuf:"bytes,1,rep,name=Bitcannaid,proto3" json:"Bitcannaid"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBitcannaidResponse) Reset()         { *m = QueryAllBitcannaidResponse{} }
func (m *QueryAllBitcannaidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBitcannaidResponse) ProtoMessage()    {}
func (*QueryAllBitcannaidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2980e3b72beb2, []int{7}
}
func (m *QueryAllBitcannaidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBitcannaidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBitcannaidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBitcannaidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBitcannaidResponse.Merge(m, src)
}
func (m *QueryAllBitcannaidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBitcannaidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBitcannaidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBitcannaidResponse proto.InternalMessageInfo

func (m *QueryAllBitcannaidResponse) GetBitcannaid() []Bitcannaid {
	if m != nil {
		return m.Bitcannaid
	}
	return nil
}

func (m *QueryAllBitcannaidResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSupplychainRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSupplychainRequest) Reset()         { *m = QueryGetSupplychainRequest{} }
func (m *QueryGetSupplychainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSupplychainRequest) ProtoMessage()    {}
func (*QueryGetSupplychainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2980e3b72beb2, []int{8}
}
func (m *QueryGetSupplychainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSupplychainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSupplychainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSupplychainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSupplychainRequest.Merge(m, src)
}
func (m *QueryGetSupplychainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSupplychainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSupplychainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSupplychainRequest proto.InternalMessageInfo

func (m *QueryGetSupplychainRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetSupplychainResponse struct {
	Supplychain Supplychain `protobuf:"bytes,1,opt,name=Supplychain,proto3" json:"Supplychain"`
}

func (m *QueryGetSupplychainResponse) Reset()         { *m = QueryGetSupplychainResponse{} }
func (m *QueryGetSupplychainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSupplychainResponse) ProtoMessage()    {}
func (*QueryGetSupplychainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2980e3b72beb2, []int{9}
}
func (m *QueryGetSupplychainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSupplychainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSupplychainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSupplychainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSupplychainResponse.Merge(m, src)
}
func (m *QueryGetSupplychainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSupplychainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSupplychainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSupplychainResponse proto.InternalMessageInfo

func (m *QueryGetSupplychainResponse) GetSupplychain() Supplychain {
	if m != nil {
		return m.Supplychain
	}
	return Supplychain{}
}

type QueryAllSupplychainRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSupplychainRequest) Reset()         { *m = QueryAllSupplychainRequest{} }
func (m *QueryAllSupplychainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSupplychainRequest) ProtoMessage()    {}
func (*QueryAllSupplychainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2980e3b72beb2, []int{10}
}
func (m *QueryAllSupplychainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSupplychainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSupplychainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSupplychainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSupplychainRequest.Merge(m, src)
}
func (m *QueryAllSupplychainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSupplychainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSupplychainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSupplychainRequest proto.InternalMessageInfo

func (m *QueryAllSupplychainRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSupplychainResponse struct {
	Supplychain []Supplychain       `protobuf:"bytes,1,rep,name=Supplychain,proto3" json:"Supplychain"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSupplychainResponse) Reset()         { *m = QueryAllSupplychainResponse{} }
func (m *QueryAllSupplychainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSupplychainResponse) ProtoMessage()    {}
func (*QueryAllSupplychainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2980e3b72beb2, []int{11}
}
func (m *QueryAllSupplychainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSupplychainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSupplychainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSupplychainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSupplychainResponse.Merge(m, src)
}
func (m *QueryAllSupplychainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSupplychainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSupplychainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSupplychainResponse proto.InternalMessageInfo

func (m *QueryAllSupplychainResponse) GetSupplychain() []Supplychain {
	if m != nil {
		return m.Supplychain
	}
	return nil
}

func (m *QueryAllSupplychainResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "bcna.bcna.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "bcna.bcna.QueryParamsResponse")
	proto.RegisterType((*QueryGetBitcannaidByBcnaidRequest)(nil), "bcna.bcna.QueryGetBitcannaidByBcnaidRequest")
	proto.RegisterType((*QueryGetBitcannaidByBcnaidResponse)(nil), "bcna.bcna.QueryGetBitcannaidByBcnaidResponse")
	proto.RegisterType((*QueryGetBitcannaidRequest)(nil), "bcna.bcna.QueryGetBitcannaidRequest")
	proto.RegisterType((*QueryGetBitcannaidResponse)(nil), "bcna.bcna.QueryGetBitcannaidResponse")
	proto.RegisterType((*QueryAllBitcannaidRequest)(nil), "bcna.bcna.QueryAllBitcannaidRequest")
	proto.RegisterType((*QueryAllBitcannaidResponse)(nil), "bcna.bcna.QueryAllBitcannaidResponse")
	proto.RegisterType((*QueryGetSupplychainRequest)(nil), "bcna.bcna.QueryGetSupplychainRequest")
	proto.RegisterType((*QueryGetSupplychainResponse)(nil), "bcna.bcna.QueryGetSupplychainResponse")
	proto.RegisterType((*QueryAllSupplychainRequest)(nil), "bcna.bcna.QueryAllSupplychainRequest")
	proto.RegisterType((*QueryAllSupplychainResponse)(nil), "bcna.bcna.QueryAllSupplychainResponse")
}

func init() { proto.RegisterFile("bcna/bcna/query.proto", fileDescriptor_54c2980e3b72beb2) }

var fileDescriptor_54c2980e3b72beb2 = []byte{
	// 697 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xe3, 0xb4, 0x44, 0xea, 0x56, 0x54, 0xea, 0xb6, 0x0d, 0xad, 0xdb, 0xb8, 0xb0, 0xd0,
	0x16, 0xf5, 0xc3, 0xab, 0x16, 0x6e, 0x95, 0x90, 0x6a, 0x04, 0x39, 0x70, 0x29, 0xe6, 0x04, 0x12,
	0x87, 0xb5, 0x63, 0xb9, 0x96, 0x1c, 0xaf, 0x1b, 0x3b, 0x88, 0x28, 0x8a, 0x10, 0xbc, 0x00, 0x48,
	0xbc, 0x00, 0xe2, 0x80, 0x38, 0xf2, 0x18, 0x39, 0x56, 0xe2, 0xc2, 0xa9, 0x42, 0x09, 0x12, 0xaf,
	0x81, 0xbc, 0xbb, 0xad, 0x9d, 0x78, 0xd3, 0xb4, 0xa8, 0x17, 0x3b, 0xd9, 0x99, 0x9d, 0xff, 0x6f,
	0x66, 0x67, 0xc7, 0x60, 0xc1, 0xb2, 0x03, 0x82, 0xd9, 0xe3, 0xb8, 0xe9, 0x34, 0x5a, 0x7a, 0xd8,
	0xa0, 0x31, 0x85, 0x53, 0xc9, 0x8a, 0x9e, 0x3c, 0xd4, 0x59, 0x52, 0xf7, 0x02, 0x8a, 0xd9, 0x93,
	0x5b, 0xd5, 0x79, 0x97, 0xba, 0x94, 0xfd, 0xc4, 0xc9, 0x2f, 0xb1, 0xba, 0xe2, 0x52, 0xea, 0xfa,
	0x0e, 0x26, 0xa1, 0x87, 0x49, 0x10, 0xd0, 0x98, 0xc4, 0x1e, 0x0d, 0x22, 0x61, 0xdd, 0xb4, 0x69,
	0x54, 0xa7, 0x11, 0xb6, 0x48, 0xe4, 0x70, 0x29, 0xfc, 0x66, 0xd7, 0x72, 0x62, 0xb2, 0x8b, 0x43,
	0xe2, 0x7a, 0x01, 0x73, 0x16, 0xbe, 0xe5, 0x14, 0x2a, 0x24, 0x0d, 0x52, 0x3f, 0x8b, 0xa1, 0xa6,
	0xeb, 0x96, 0x17, 0xdb, 0x24, 0x08, 0x88, 0x57, 0x13, 0xb6, 0xe5, 0xd4, 0x16, 0x35, 0xc3, 0xd0,
	0x6f, 0xd9, 0x47, 0xc4, 0x13, 0x01, 0xd1, 0x3c, 0x80, 0xcf, 0x13, 0xc9, 0x43, 0x16, 0xcd, 0x74,
	0x8e, 0x9b, 0x4e, 0x14, 0xa3, 0x67, 0x60, 0x6e, 0x60, 0x35, 0x0a, 0x69, 0x10, 0x39, 0xf0, 0x21,
	0x28, 0x71, 0xd5, 0x45, 0xe5, 0xb6, 0x72, 0x7f, 0x7a, 0x6f, 0x56, 0x3f, 0x2f, 0x86, 0xce, 0x5d,
	0x8d, 0xa9, 0xee, 0xe9, 0x6a, 0xe1, 0xfb, 0xdf, 0x1f, 0x9b, 0x8a, 0x29, 0x7c, 0xd1, 0x3e, 0xb8,
	0xc3, 0x82, 0x55, 0x9d, 0xd8, 0x38, 0x67, 0x33, 0x5a, 0x86, 0x9d, 0xbc, 0x85, 0x22, 0x2c, 0x83,
	0x92, 0xc5, 0x16, 0x58, 0xe8, 0x29, 0x53, 0xfc, 0x43, 0x04, 0xa0, 0x8b, 0x36, 0x0b, 0xb0, 0x7d,
	0x00, 0x52, 0xab, 0x80, 0x5b, 0xc8, 0xc0, 0x65, 0xb6, 0x4e, 0x76, 0x4f, 0x57, 0x15, 0x33, 0xe3,
	0x8e, 0xb6, 0xc0, 0x52, 0x5e, 0xe2, 0x8c, 0x6b, 0x06, 0x14, 0x45, 0xc4, 0x49, 0xb3, 0xe8, 0xd5,
	0xd0, 0x4b, 0xa0, 0xca, 0x9c, 0xff, 0x8f, 0xa3, 0x30, 0xc0, 0x61, 0x0b, 0x8e, 0x03, 0xdf, 0xcf,
	0x73, 0x3c, 0x05, 0x20, 0x6d, 0x06, 0x11, 0x79, 0x5d, 0xe7, 0x9d, 0xa3, 0x27, 0x9d, 0xa3, 0xf3,
	0x26, 0x15, 0x9d, 0xa3, 0x1f, 0x12, 0xd7, 0x11, 0x7b, 0xcd, 0xcc, 0x4e, 0xf4, 0x55, 0x11, 0x09,
	0x0c, 0xa9, 0x8c, 0x48, 0x60, 0xe2, 0x0a, 0x09, 0xc0, 0xea, 0x00, 0x63, 0x91, 0x31, 0x6e, 0x8c,
	0x65, 0xe4, 0xca, 0x03, 0x90, 0xdb, 0x69, 0x91, 0x5f, 0xa4, 0x1d, 0x3b, 0xea, 0x48, 0x5e, 0x83,
	0x65, 0xa9, 0xb7, 0x48, 0xe9, 0x11, 0x98, 0xce, 0x2c, 0x8b, 0xd2, 0x95, 0x33, 0x39, 0x65, 0xac,
	0x22, 0xa9, 0xec, 0x06, 0x54, 0x4b, 0x0b, 0x26, 0x81, 0xb9, 0xae, 0x73, 0xf9, 0xa6, 0x88, 0x2c,
	0x86, 0x65, 0x46, 0x65, 0x31, 0x71, 0xa5, 0x2c, 0xae, 0xed, 0x6c, 0xf6, 0x3e, 0x96, 0xc0, 0x0d,
	0x06, 0x0a, 0x2d, 0x50, 0xe2, 0x97, 0x1e, 0x56, 0x32, 0x1c, 0xf9, 0x69, 0xa2, 0x6a, 0xa3, 0xcc,
	0x3c, 0x3c, 0x5a, 0xfa, 0xf0, 0xf3, 0xcf, 0xe7, 0xe2, 0x1c, 0x9c, 0xc5, 0xc3, 0xd3, 0x0d, 0x76,
	0xb2, 0xfd, 0x08, 0xef, 0x0d, 0x07, 0x92, 0x5d, 0x59, 0x75, 0x6d, 0x8c, 0x97, 0x50, 0x45, 0x4c,
	0x75, 0x05, 0xaa, 0x58, 0x36, 0x3b, 0x71, 0xdb, 0xab, 0x75, 0xe0, 0x17, 0x05, 0xc0, 0xfc, 0xd8,
	0x81, 0xdb, 0x17, 0x2a, 0x0c, 0x8d, 0x36, 0x75, 0xe7, 0x92, 0xde, 0x82, 0x6b, 0x87, 0x71, 0x6d,
	0xc0, 0x35, 0x39, 0x17, 0x9f, 0x8b, 0xb8, 0xcd, 0xdf, 0x1d, 0xd8, 0x06, 0x37, 0xd3, 0x60, 0x07,
	0xbe, 0x9f, 0x2f, 0x92, 0x6c, 0x9e, 0xe4, 0x8b, 0x24, 0x9d, 0x07, 0xa8, 0xc2, 0x60, 0x6e, 0xc1,
	0x05, 0x29, 0x0c, 0x7c, 0xaf, 0x0c, 0xb4, 0x25, 0x94, 0x95, 0x3e, 0x7f, 0x69, 0xd4, 0xf5, 0x71,
	0x6e, 0x42, 0xfd, 0x2e, 0x53, 0xaf, 0xc0, 0x65, 0x2c, 0xfd, 0x84, 0xf1, 0x33, 0x7a, 0x07, 0x66,
	0x32, 0x7b, 0x93, 0x0a, 0xc8, 0x72, 0xbb, 0x0c, 0x85, 0xfc, 0xea, 0x21, 0x8d, 0x51, 0x2c, 0xc2,
	0xb2, 0x9c, 0xc2, 0x78, 0xd2, 0xed, 0x69, 0xca, 0x49, 0x4f, 0x53, 0x7e, 0xf7, 0x34, 0xe5, 0x53,
	0x5f, 0x2b, 0x9c, 0xf4, 0xb5, 0xc2, 0xaf, 0xbe, 0x56, 0x78, 0xb5, 0xe5, 0x7a, 0xf1, 0x51, 0xd3,
	0xd2, 0x6d, 0x5a, 0xc7, 0x86, 0x17, 0x3f, 0x4e, 0xaa, 0x56, 0xf5, 0xa9, 0x45, 0x7c, 0x1e, 0xe5,
	0x2d, 0x7f, 0xc5, 0xad, 0xd0, 0x89, 0xac, 0x12, 0xfb, 0x20, 0x3f, 0xf8, 0x17, 0x00, 0x00, 0xff,
	0xff, 0xc2, 0x77, 0x03, 0x99, 0x78, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Bitcannaid items.
	Bitcannaid(ctx context.Context, in *QueryGetBitcannaidRequest, opts ...grpc.CallOption) (*QueryGetBitcannaidResponse, error)
	// Queries a Bitcannaid by bcnaid.
	BitcannaidByBcnaid(ctx context.Context, in *QueryGetBitcannaidByBcnaidRequest, opts ...grpc.CallOption) (*QueryGetBitcannaidByBcnaidResponse, error)
	BitcannaidAll(ctx context.Context, in *QueryAllBitcannaidRequest, opts ...grpc.CallOption) (*QueryAllBitcannaidResponse, error)
	// Queries a list of Supplychain items.
	Supplychain(ctx context.Context, in *QueryGetSupplychainRequest, opts ...grpc.CallOption) (*QueryGetSupplychainResponse, error)
	SupplychainAll(ctx context.Context, in *QueryAllSupplychainRequest, opts ...grpc.CallOption) (*QueryAllSupplychainResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/bcna.bcna.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Bitcannaid(ctx context.Context, in *QueryGetBitcannaidRequest, opts ...grpc.CallOption) (*QueryGetBitcannaidResponse, error) {
	out := new(QueryGetBitcannaidResponse)
	err := c.cc.Invoke(ctx, "/bcna.bcna.Query/Bitcannaid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BitcannaidByBcnaid(ctx context.Context, in *QueryGetBitcannaidByBcnaidRequest, opts ...grpc.CallOption) (*QueryGetBitcannaidByBcnaidResponse, error) {
	out := new(QueryGetBitcannaidByBcnaidResponse)
	err := c.cc.Invoke(ctx, "/bcna.bcna.Query/BitcannaidByBcnaid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BitcannaidAll(ctx context.Context, in *QueryAllBitcannaidRequest, opts ...grpc.CallOption) (*QueryAllBitcannaidResponse, error) {
	out := new(QueryAllBitcannaidResponse)
	err := c.cc.Invoke(ctx, "/bcna.bcna.Query/BitcannaidAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Supplychain(ctx context.Context, in *QueryGetSupplychainRequest, opts ...grpc.CallOption) (*QueryGetSupplychainResponse, error) {
	out := new(QueryGetSupplychainResponse)
	err := c.cc.Invoke(ctx, "/bcna.bcna.Query/Supplychain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SupplychainAll(ctx context.Context, in *QueryAllSupplychainRequest, opts ...grpc.CallOption) (*QueryAllSupplychainResponse, error) {
	out := new(QueryAllSupplychainResponse)
	err := c.cc.Invoke(ctx, "/bcna.bcna.Query/SupplychainAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Bitcannaid items.
	Bitcannaid(context.Context, *QueryGetBitcannaidRequest) (*QueryGetBitcannaidResponse, error)
	// Queries a Bitcannaid by bcnaid.
	BitcannaidByBcnaid(context.Context, *QueryGetBitcannaidByBcnaidRequest) (*QueryGetBitcannaidByBcnaidResponse, error)
	BitcannaidAll(context.Context, *QueryAllBitcannaidRequest) (*QueryAllBitcannaidResponse, error)
	// Queries a list of Supplychain items.
	Supplychain(context.Context, *QueryGetSupplychainRequest) (*QueryGetSupplychainResponse, error)
	SupplychainAll(context.Context, *QueryAllSupplychainRequest) (*QueryAllSupplychainResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Bitcannaid(ctx context.Context, req *QueryGetBitcannaidRequest) (*QueryGetBitcannaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bitcannaid not implemented")
}
func (*UnimplementedQueryServer) BitcannaidByBcnaid(ctx context.Context, req *QueryGetBitcannaidByBcnaidRequest) (*QueryGetBitcannaidByBcnaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BitcannaidByBcnaid not implemented")
}
func (*UnimplementedQueryServer) BitcannaidAll(ctx context.Context, req *QueryAllBitcannaidRequest) (*QueryAllBitcannaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BitcannaidAll not implemented")
}
func (*UnimplementedQueryServer) Supplychain(ctx context.Context, req *QueryGetSupplychainRequest) (*QueryGetSupplychainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Supplychain not implemented")
}
func (*UnimplementedQueryServer) SupplychainAll(ctx context.Context, req *QueryAllSupplychainRequest) (*QueryAllSupplychainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplychainAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcna.bcna.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Bitcannaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBitcannaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bitcannaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcna.bcna.Query/Bitcannaid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bitcannaid(ctx, req.(*QueryGetBitcannaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BitcannaidByBcnaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBitcannaidByBcnaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BitcannaidByBcnaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcna.bcna.Query/BitcannaidByBcnaid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BitcannaidByBcnaid(ctx, req.(*QueryGetBitcannaidByBcnaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BitcannaidAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBitcannaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BitcannaidAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcna.bcna.Query/BitcannaidAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BitcannaidAll(ctx, req.(*QueryAllBitcannaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Supplychain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSupplychainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Supplychain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcna.bcna.Query/Supplychain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Supplychain(ctx, req.(*QueryGetSupplychainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SupplychainAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSupplychainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SupplychainAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcna.bcna.Query/SupplychainAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SupplychainAll(ctx, req.(*QueryAllSupplychainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bcna.bcna.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Bitcannaid",
			Handler:    _Query_Bitcannaid_Handler,
		},
		{
			MethodName: "BitcannaidByBcnaid",
			Handler:    _Query_BitcannaidByBcnaid_Handler,
		},
		{
			MethodName: "BitcannaidAll",
			Handler:    _Query_BitcannaidAll_Handler,
		},
		{
			MethodName: "Supplychain",
			Handler:    _Query_Supplychain_Handler,
		},
		{
			MethodName: "SupplychainAll",
			Handler:    _Query_SupplychainAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcna/bcna/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetBitcannaidByBcnaidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBitcannaidByBcnaidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBitcannaidByBcnaidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bcnaid) > 0 {
		i -= len(m.Bcnaid)
		copy(dAtA[i:], m.Bcnaid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bcnaid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBitcannaidByBcnaidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBitcannaidByBcnaidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBitcannaidByBcnaidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bitcannaid != nil {
		{
			size, err := m.Bitcannaid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBitcannaidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBitcannaidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBitcannaidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBitcannaidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBitcannaidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBitcannaidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Bitcannaid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBitcannaidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBitcannaidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBitcannaidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBitcannaidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBitcannaidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBitcannaidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bitcannaid) > 0 {
		for iNdEx := len(m.Bitcannaid) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bitcannaid[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSupplychainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSupplychainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSupplychainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSupplychainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSupplychainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSupplychainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Supplychain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSupplychainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSupplychainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSupplychainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSupplychainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSupplychainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSupplychainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Supplychain) > 0 {
		for iNdEx := len(m.Supplychain) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Supplychain[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetBitcannaidByBcnaidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bcnaid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBitcannaidByBcnaidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bitcannaid != nil {
		l = m.Bitcannaid.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBitcannaidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetBitcannaidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Bitcannaid.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBitcannaidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBitcannaidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bitcannaid) > 0 {
		for _, e := range m.Bitcannaid {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSupplychainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSupplychainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Supplychain.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSupplychainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSupplychainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Supplychain) > 0 {
		for _, e := range m.Supplychain {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBitcannaidByBcnaidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBitcannaidByBcnaidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBitcannaidByBcnaidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bcnaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bcnaid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBitcannaidByBcnaidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBitcannaidByBcnaidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBitcannaidByBcnaidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitcannaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bitcannaid == nil {
				m.Bitcannaid = &Bitcannaid{}
			}
			if err := m.Bitcannaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBitcannaidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBitcannaidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBitcannaidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBitcannaidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBitcannaidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBitcannaidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitcannaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bitcannaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBitcannaidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBitcannaidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBitcannaidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBitcannaidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBitcannaidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBitcannaidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitcannaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bitcannaid = append(m.Bitcannaid, Bitcannaid{})
			if err := m.Bitcannaid[len(m.Bitcannaid)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSupplychainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSupplychainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSupplychainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSupplychainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSupplychainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSupplychainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supplychain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Supplychain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSupplychainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSupplychainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSupplychainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSupplychainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSupplychainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSupplychainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supplychain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supplychain = append(m.Supplychain, Supplychain{})
			if err := m.Supplychain[len(m.Supplychain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
