// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bcna/bcna/tx.proto

package bcna

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName      = "/bcna.bcna.Msg/UpdateParams"
	Msg_CreateBitcannaid_FullMethodName  = "/bcna.bcna.Msg/CreateBitcannaid"
	Msg_UpdateBitcannaid_FullMethodName  = "/bcna.bcna.Msg/UpdateBitcannaid"
	Msg_DeleteBitcannaid_FullMethodName  = "/bcna.bcna.Msg/DeleteBitcannaid"
	Msg_CreateSupplychain_FullMethodName = "/bcna.bcna.Msg/CreateSupplychain"
	Msg_UpdateSupplychain_FullMethodName = "/bcna.bcna.Msg/UpdateSupplychain"
	Msg_DeleteSupplychain_FullMethodName = "/bcna.bcna.Msg/DeleteSupplychain"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateBitcannaid(ctx context.Context, in *MsgCreateBitcannaid, opts ...grpc.CallOption) (*MsgCreateBitcannaidResponse, error)
	UpdateBitcannaid(ctx context.Context, in *MsgUpdateBitcannaid, opts ...grpc.CallOption) (*MsgUpdateBitcannaidResponse, error)
	DeleteBitcannaid(ctx context.Context, in *MsgDeleteBitcannaid, opts ...grpc.CallOption) (*MsgDeleteBitcannaidResponse, error)
	CreateSupplychain(ctx context.Context, in *MsgCreateSupplychain, opts ...grpc.CallOption) (*MsgCreateSupplychainResponse, error)
	UpdateSupplychain(ctx context.Context, in *MsgUpdateSupplychain, opts ...grpc.CallOption) (*MsgUpdateSupplychainResponse, error)
	DeleteSupplychain(ctx context.Context, in *MsgDeleteSupplychain, opts ...grpc.CallOption) (*MsgDeleteSupplychainResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateBitcannaid(ctx context.Context, in *MsgCreateBitcannaid, opts ...grpc.CallOption) (*MsgCreateBitcannaidResponse, error) {
	out := new(MsgCreateBitcannaidResponse)
	err := c.cc.Invoke(ctx, Msg_CreateBitcannaid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBitcannaid(ctx context.Context, in *MsgUpdateBitcannaid, opts ...grpc.CallOption) (*MsgUpdateBitcannaidResponse, error) {
	out := new(MsgUpdateBitcannaidResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateBitcannaid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteBitcannaid(ctx context.Context, in *MsgDeleteBitcannaid, opts ...grpc.CallOption) (*MsgDeleteBitcannaidResponse, error) {
	out := new(MsgDeleteBitcannaidResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteBitcannaid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSupplychain(ctx context.Context, in *MsgCreateSupplychain, opts ...grpc.CallOption) (*MsgCreateSupplychainResponse, error) {
	out := new(MsgCreateSupplychainResponse)
	err := c.cc.Invoke(ctx, Msg_CreateSupplychain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSupplychain(ctx context.Context, in *MsgUpdateSupplychain, opts ...grpc.CallOption) (*MsgUpdateSupplychainResponse, error) {
	out := new(MsgUpdateSupplychainResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateSupplychain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteSupplychain(ctx context.Context, in *MsgDeleteSupplychain, opts ...grpc.CallOption) (*MsgDeleteSupplychainResponse, error) {
	out := new(MsgDeleteSupplychainResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteSupplychain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateBitcannaid(context.Context, *MsgCreateBitcannaid) (*MsgCreateBitcannaidResponse, error)
	UpdateBitcannaid(context.Context, *MsgUpdateBitcannaid) (*MsgUpdateBitcannaidResponse, error)
	DeleteBitcannaid(context.Context, *MsgDeleteBitcannaid) (*MsgDeleteBitcannaidResponse, error)
	CreateSupplychain(context.Context, *MsgCreateSupplychain) (*MsgCreateSupplychainResponse, error)
	UpdateSupplychain(context.Context, *MsgUpdateSupplychain) (*MsgUpdateSupplychainResponse, error)
	DeleteSupplychain(context.Context, *MsgDeleteSupplychain) (*MsgDeleteSupplychainResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateBitcannaid(context.Context, *MsgCreateBitcannaid) (*MsgCreateBitcannaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBitcannaid not implemented")
}
func (UnimplementedMsgServer) UpdateBitcannaid(context.Context, *MsgUpdateBitcannaid) (*MsgUpdateBitcannaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBitcannaid not implemented")
}
func (UnimplementedMsgServer) DeleteBitcannaid(context.Context, *MsgDeleteBitcannaid) (*MsgDeleteBitcannaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBitcannaid not implemented")
}
func (UnimplementedMsgServer) CreateSupplychain(context.Context, *MsgCreateSupplychain) (*MsgCreateSupplychainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplychain not implemented")
}
func (UnimplementedMsgServer) UpdateSupplychain(context.Context, *MsgUpdateSupplychain) (*MsgUpdateSupplychainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplychain not implemented")
}
func (UnimplementedMsgServer) DeleteSupplychain(context.Context, *MsgDeleteSupplychain) (*MsgDeleteSupplychainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupplychain not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateBitcannaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBitcannaid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBitcannaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateBitcannaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBitcannaid(ctx, req.(*MsgCreateBitcannaid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBitcannaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBitcannaid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBitcannaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateBitcannaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBitcannaid(ctx, req.(*MsgUpdateBitcannaid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteBitcannaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteBitcannaid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteBitcannaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteBitcannaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteBitcannaid(ctx, req.(*MsgDeleteBitcannaid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSupplychain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSupplychain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSupplychain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateSupplychain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSupplychain(ctx, req.(*MsgCreateSupplychain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSupplychain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSupplychain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSupplychain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateSupplychain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSupplychain(ctx, req.(*MsgUpdateSupplychain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteSupplychain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteSupplychain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteSupplychain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteSupplychain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteSupplychain(ctx, req.(*MsgDeleteSupplychain))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bcna.bcna.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateBitcannaid",
			Handler:    _Msg_CreateBitcannaid_Handler,
		},
		{
			MethodName: "UpdateBitcannaid",
			Handler:    _Msg_UpdateBitcannaid_Handler,
		},
		{
			MethodName: "DeleteBitcannaid",
			Handler:    _Msg_DeleteBitcannaid_Handler,
		},
		{
			MethodName: "CreateSupplychain",
			Handler:    _Msg_CreateSupplychain_Handler,
		},
		{
			MethodName: "UpdateSupplychain",
			Handler:    _Msg_UpdateSupplychain_Handler,
		},
		{
			MethodName: "DeleteSupplychain",
			Handler:    _Msg_DeleteSupplychain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcna/bcna/tx.proto",
}
